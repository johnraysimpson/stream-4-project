{"filter":false,"title":"app.py","tooltip":"/app.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":170,"column":47},"end":{"row":170,"column":48},"action":"insert","lines":["b"],"id":328},{"start":{"row":170,"column":48},"end":{"row":170,"column":49},"action":"insert","lines":["j"]},{"start":{"row":170,"column":49},"end":{"row":170,"column":50},"action":"insert","lines":["e"]}],[{"start":{"row":170,"column":46},"end":{"row":170,"column":50},"action":"remove","lines":["Obje"],"id":329},{"start":{"row":170,"column":46},"end":{"row":170,"column":54},"action":"insert","lines":["ObjectId"]}],[{"start":{"row":170,"column":54},"end":{"row":170,"column":56},"action":"insert","lines":["()"],"id":330}],[{"start":{"row":170,"column":55},"end":{"row":170,"column":56},"action":"insert","lines":["r"],"id":331},{"start":{"row":170,"column":56},"end":{"row":170,"column":57},"action":"insert","lines":["e"]},{"start":{"row":170,"column":57},"end":{"row":170,"column":58},"action":"insert","lines":["c"]},{"start":{"row":170,"column":58},"end":{"row":170,"column":59},"action":"insert","lines":["i"]},{"start":{"row":170,"column":59},"end":{"row":170,"column":60},"action":"insert","lines":["p"]},{"start":{"row":170,"column":60},"end":{"row":170,"column":61},"action":"insert","lines":["e"]},{"start":{"row":170,"column":61},"end":{"row":170,"column":62},"action":"insert","lines":["_"]}],[{"start":{"row":170,"column":62},"end":{"row":170,"column":63},"action":"insert","lines":["i"],"id":332},{"start":{"row":170,"column":63},"end":{"row":170,"column":64},"action":"insert","lines":["d"]}],[{"start":{"row":170,"column":39},"end":{"row":170,"column":40},"action":"insert","lines":["{"],"id":333}],[{"start":{"row":170,"column":66},"end":{"row":170,"column":67},"action":"insert","lines":["}"],"id":334}],[{"start":{"row":170,"column":68},"end":{"row":171,"column":0},"action":"insert","lines":["",""],"id":335},{"start":{"row":171,"column":0},"end":{"row":171,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":171,"column":4},"end":{"row":171,"column":5},"action":"insert","lines":["r"],"id":336},{"start":{"row":171,"column":5},"end":{"row":171,"column":6},"action":"insert","lines":["e"]},{"start":{"row":171,"column":6},"end":{"row":171,"column":7},"action":"insert","lines":["t"]},{"start":{"row":171,"column":7},"end":{"row":171,"column":8},"action":"insert","lines":["u"]},{"start":{"row":171,"column":8},"end":{"row":171,"column":9},"action":"insert","lines":["r"]},{"start":{"row":171,"column":9},"end":{"row":171,"column":10},"action":"insert","lines":["n"]}],[{"start":{"row":171,"column":10},"end":{"row":171,"column":11},"action":"insert","lines":[" "],"id":337}],[{"start":{"row":171,"column":11},"end":{"row":171,"column":12},"action":"insert","lines":["r"],"id":338},{"start":{"row":171,"column":12},"end":{"row":171,"column":13},"action":"insert","lines":["e"]},{"start":{"row":171,"column":13},"end":{"row":171,"column":14},"action":"insert","lines":["n"]},{"start":{"row":171,"column":14},"end":{"row":171,"column":15},"action":"insert","lines":["d"]},{"start":{"row":171,"column":15},"end":{"row":171,"column":16},"action":"insert","lines":["e"]},{"start":{"row":171,"column":16},"end":{"row":171,"column":17},"action":"insert","lines":["r"]}],[{"start":{"row":171,"column":17},"end":{"row":171,"column":18},"action":"insert","lines":["_"],"id":339},{"start":{"row":171,"column":18},"end":{"row":171,"column":19},"action":"insert","lines":["t"]},{"start":{"row":171,"column":19},"end":{"row":171,"column":20},"action":"insert","lines":["e"]},{"start":{"row":171,"column":20},"end":{"row":171,"column":21},"action":"insert","lines":["m"]},{"start":{"row":171,"column":21},"end":{"row":171,"column":22},"action":"insert","lines":["p"]},{"start":{"row":171,"column":22},"end":{"row":171,"column":23},"action":"insert","lines":["l"]},{"start":{"row":171,"column":23},"end":{"row":171,"column":24},"action":"insert","lines":["e"]}],[{"start":{"row":171,"column":23},"end":{"row":171,"column":24},"action":"remove","lines":["e"],"id":340}],[{"start":{"row":171,"column":23},"end":{"row":171,"column":24},"action":"insert","lines":["a"],"id":341},{"start":{"row":171,"column":24},"end":{"row":171,"column":25},"action":"insert","lines":["r"]}],[{"start":{"row":171,"column":24},"end":{"row":171,"column":25},"action":"remove","lines":["r"],"id":342}],[{"start":{"row":171,"column":24},"end":{"row":171,"column":25},"action":"insert","lines":["t"],"id":343},{"start":{"row":171,"column":25},"end":{"row":171,"column":26},"action":"insert","lines":["e"]}],[{"start":{"row":171,"column":26},"end":{"row":171,"column":28},"action":"insert","lines":["()"],"id":344}],[{"start":{"row":171,"column":27},"end":{"row":171,"column":28},"action":"insert","lines":["r"],"id":345},{"start":{"row":171,"column":28},"end":{"row":171,"column":29},"action":"insert","lines":["e"]},{"start":{"row":171,"column":29},"end":{"row":171,"column":30},"action":"insert","lines":["c"]},{"start":{"row":171,"column":30},"end":{"row":171,"column":31},"action":"insert","lines":["i"]},{"start":{"row":171,"column":31},"end":{"row":171,"column":32},"action":"insert","lines":["p"]},{"start":{"row":171,"column":32},"end":{"row":171,"column":33},"action":"insert","lines":["e"]}],[{"start":{"row":171,"column":32},"end":{"row":171,"column":33},"action":"remove","lines":["e"],"id":346},{"start":{"row":171,"column":31},"end":{"row":171,"column":32},"action":"remove","lines":["p"]},{"start":{"row":171,"column":30},"end":{"row":171,"column":31},"action":"remove","lines":["i"]},{"start":{"row":171,"column":29},"end":{"row":171,"column":30},"action":"remove","lines":["c"]},{"start":{"row":171,"column":28},"end":{"row":171,"column":29},"action":"remove","lines":["e"]},{"start":{"row":171,"column":27},"end":{"row":171,"column":28},"action":"remove","lines":["r"]}],[{"start":{"row":171,"column":27},"end":{"row":171,"column":29},"action":"insert","lines":["''"],"id":347}],[{"start":{"row":171,"column":28},"end":{"row":171,"column":29},"action":"insert","lines":["r"],"id":348},{"start":{"row":171,"column":29},"end":{"row":171,"column":30},"action":"insert","lines":["e"]},{"start":{"row":171,"column":30},"end":{"row":171,"column":31},"action":"insert","lines":["c"]},{"start":{"row":171,"column":31},"end":{"row":171,"column":32},"action":"insert","lines":["i"]},{"start":{"row":171,"column":32},"end":{"row":171,"column":33},"action":"insert","lines":["p"]},{"start":{"row":171,"column":33},"end":{"row":171,"column":34},"action":"insert","lines":["e"]},{"start":{"row":171,"column":34},"end":{"row":171,"column":35},"action":"insert","lines":["."]},{"start":{"row":171,"column":35},"end":{"row":171,"column":36},"action":"insert","lines":["h"]},{"start":{"row":171,"column":36},"end":{"row":171,"column":37},"action":"insert","lines":["t"]},{"start":{"row":171,"column":37},"end":{"row":171,"column":38},"action":"insert","lines":["m"]},{"start":{"row":171,"column":38},"end":{"row":171,"column":39},"action":"insert","lines":["l"]}],[{"start":{"row":171,"column":40},"end":{"row":171,"column":41},"action":"insert","lines":[","],"id":349}],[{"start":{"row":171,"column":41},"end":{"row":171,"column":42},"action":"insert","lines":[" "],"id":350},{"start":{"row":171,"column":42},"end":{"row":171,"column":43},"action":"insert","lines":["r"]},{"start":{"row":171,"column":43},"end":{"row":171,"column":44},"action":"insert","lines":["e"]},{"start":{"row":171,"column":44},"end":{"row":171,"column":45},"action":"insert","lines":["c"]},{"start":{"row":171,"column":45},"end":{"row":171,"column":46},"action":"insert","lines":["i"]},{"start":{"row":171,"column":46},"end":{"row":171,"column":47},"action":"insert","lines":["p"]}],[{"start":{"row":171,"column":47},"end":{"row":171,"column":48},"action":"insert","lines":["e"],"id":351},{"start":{"row":171,"column":48},"end":{"row":171,"column":49},"action":"insert","lines":["="]},{"start":{"row":171,"column":49},"end":{"row":171,"column":50},"action":"insert","lines":["r"]},{"start":{"row":171,"column":50},"end":{"row":171,"column":51},"action":"insert","lines":["e"]},{"start":{"row":171,"column":51},"end":{"row":171,"column":52},"action":"insert","lines":["c"]},{"start":{"row":171,"column":52},"end":{"row":171,"column":53},"action":"insert","lines":["i"]},{"start":{"row":171,"column":53},"end":{"row":171,"column":54},"action":"insert","lines":["p"]},{"start":{"row":171,"column":54},"end":{"row":171,"column":55},"action":"insert","lines":["e"]}],[{"start":{"row":171,"column":56},"end":{"row":172,"column":0},"action":"insert","lines":["",""],"id":352},{"start":{"row":172,"column":0},"end":{"row":172,"column":4},"action":"insert","lines":["    "]},{"start":{"row":172,"column":4},"end":{"row":173,"column":0},"action":"insert","lines":["",""]},{"start":{"row":173,"column":0},"end":{"row":173,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":173,"column":0},"end":{"row":173,"column":4},"action":"remove","lines":["    "],"id":353}],[{"start":{"row":173,"column":0},"end":{"row":173,"column":1},"action":"insert","lines":["@"],"id":354},{"start":{"row":173,"column":1},"end":{"row":173,"column":2},"action":"insert","lines":["a"]},{"start":{"row":173,"column":2},"end":{"row":173,"column":3},"action":"insert","lines":["p"]},{"start":{"row":173,"column":3},"end":{"row":173,"column":4},"action":"insert","lines":["p"]},{"start":{"row":173,"column":4},"end":{"row":173,"column":5},"action":"insert","lines":["."]}],[{"start":{"row":173,"column":5},"end":{"row":173,"column":6},"action":"insert","lines":["r"],"id":355},{"start":{"row":173,"column":6},"end":{"row":173,"column":7},"action":"insert","lines":["o"]},{"start":{"row":173,"column":7},"end":{"row":173,"column":8},"action":"insert","lines":["u"]},{"start":{"row":173,"column":8},"end":{"row":173,"column":9},"action":"insert","lines":["t"]},{"start":{"row":173,"column":9},"end":{"row":173,"column":10},"action":"insert","lines":["e"]}],[{"start":{"row":173,"column":10},"end":{"row":173,"column":12},"action":"insert","lines":["()"],"id":356}],[{"start":{"row":173,"column":11},"end":{"row":173,"column":13},"action":"insert","lines":["''"],"id":357}],[{"start":{"row":173,"column":12},"end":{"row":173,"column":13},"action":"insert","lines":["/"],"id":358},{"start":{"row":173,"column":13},"end":{"row":173,"column":14},"action":"insert","lines":["r"]},{"start":{"row":173,"column":14},"end":{"row":173,"column":15},"action":"insert","lines":["e"]},{"start":{"row":173,"column":15},"end":{"row":173,"column":16},"action":"insert","lines":["c"]},{"start":{"row":173,"column":16},"end":{"row":173,"column":17},"action":"insert","lines":["i"]},{"start":{"row":173,"column":17},"end":{"row":173,"column":18},"action":"insert","lines":["p"]},{"start":{"row":173,"column":18},"end":{"row":173,"column":19},"action":"insert","lines":["e"]}],[{"start":{"row":173,"column":19},"end":{"row":173,"column":20},"action":"insert","lines":["/"],"id":359},{"start":{"row":173,"column":20},"end":{"row":173,"column":21},"action":"insert","lines":["<"]},{"start":{"row":173,"column":21},"end":{"row":173,"column":22},"action":"insert","lines":["r"]},{"start":{"row":173,"column":22},"end":{"row":173,"column":23},"action":"insert","lines":["e"]},{"start":{"row":173,"column":23},"end":{"row":173,"column":24},"action":"insert","lines":["c"]},{"start":{"row":173,"column":24},"end":{"row":173,"column":25},"action":"insert","lines":["i"]},{"start":{"row":173,"column":25},"end":{"row":173,"column":26},"action":"insert","lines":["p"]},{"start":{"row":173,"column":26},"end":{"row":173,"column":27},"action":"insert","lines":["e"]}],[{"start":{"row":173,"column":27},"end":{"row":173,"column":28},"action":"insert","lines":["_"],"id":360},{"start":{"row":173,"column":28},"end":{"row":173,"column":29},"action":"insert","lines":["i"]},{"start":{"row":173,"column":29},"end":{"row":173,"column":30},"action":"insert","lines":["d"]},{"start":{"row":173,"column":30},"end":{"row":173,"column":31},"action":"insert","lines":["?"]}],[{"start":{"row":173,"column":30},"end":{"row":173,"column":31},"action":"remove","lines":["?"],"id":361}],[{"start":{"row":173,"column":30},"end":{"row":173,"column":31},"action":"insert","lines":[">"],"id":362},{"start":{"row":173,"column":31},"end":{"row":173,"column":32},"action":"insert","lines":["/"]}],[{"start":{"row":173,"column":32},"end":{"row":173,"column":33},"action":"insert","lines":["<"],"id":363},{"start":{"row":173,"column":33},"end":{"row":173,"column":34},"action":"insert","lines":["u"]},{"start":{"row":173,"column":34},"end":{"row":173,"column":35},"action":"insert","lines":["s"]},{"start":{"row":173,"column":35},"end":{"row":173,"column":36},"action":"insert","lines":["e"]},{"start":{"row":173,"column":36},"end":{"row":173,"column":37},"action":"insert","lines":["r"]}],[{"start":{"row":173,"column":37},"end":{"row":173,"column":38},"action":"insert","lines":["_"],"id":364},{"start":{"row":173,"column":38},"end":{"row":173,"column":39},"action":"insert","lines":["u"]}],[{"start":{"row":173,"column":38},"end":{"row":173,"column":39},"action":"remove","lines":["u"],"id":365}],[{"start":{"row":173,"column":38},"end":{"row":173,"column":39},"action":"insert","lines":["i"],"id":366},{"start":{"row":173,"column":39},"end":{"row":173,"column":40},"action":"insert","lines":["d"]}],[{"start":{"row":173,"column":42},"end":{"row":173,"column":43},"action":"insert","lines":[":"],"id":367}],[{"start":{"row":173,"column":43},"end":{"row":174,"column":0},"action":"insert","lines":["",""],"id":368},{"start":{"row":174,"column":0},"end":{"row":174,"column":4},"action":"insert","lines":["    "]},{"start":{"row":174,"column":4},"end":{"row":174,"column":5},"action":"insert","lines":["u"]},{"start":{"row":174,"column":5},"end":{"row":174,"column":6},"action":"insert","lines":["s"]}],[{"start":{"row":174,"column":6},"end":{"row":174,"column":7},"action":"insert","lines":["e"],"id":369},{"start":{"row":174,"column":7},"end":{"row":174,"column":8},"action":"insert","lines":["r"]}],[{"start":{"row":174,"column":8},"end":{"row":174,"column":9},"action":"insert","lines":[" "],"id":370},{"start":{"row":174,"column":9},"end":{"row":174,"column":10},"action":"insert","lines":["="]}],[{"start":{"row":174,"column":10},"end":{"row":174,"column":11},"action":"insert","lines":[" "],"id":371}],[{"start":{"row":174,"column":10},"end":{"row":174,"column":11},"action":"remove","lines":[" "],"id":372},{"start":{"row":174,"column":9},"end":{"row":174,"column":10},"action":"remove","lines":["="]},{"start":{"row":174,"column":8},"end":{"row":174,"column":9},"action":"remove","lines":[" "]},{"start":{"row":174,"column":7},"end":{"row":174,"column":8},"action":"remove","lines":["r"]},{"start":{"row":174,"column":6},"end":{"row":174,"column":7},"action":"remove","lines":["e"]},{"start":{"row":174,"column":5},"end":{"row":174,"column":6},"action":"remove","lines":["s"]},{"start":{"row":174,"column":4},"end":{"row":174,"column":5},"action":"remove","lines":["u"]},{"start":{"row":174,"column":0},"end":{"row":174,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":174,"column":0},"end":{"row":174,"column":1},"action":"insert","lines":["d"],"id":373},{"start":{"row":174,"column":1},"end":{"row":174,"column":2},"action":"insert","lines":["e"]},{"start":{"row":174,"column":2},"end":{"row":174,"column":3},"action":"insert","lines":["f"]}],[{"start":{"row":174,"column":3},"end":{"row":174,"column":4},"action":"insert","lines":[" "],"id":374}],[{"start":{"row":174,"column":3},"end":{"row":174,"column":4},"action":"remove","lines":[" "],"id":375},{"start":{"row":174,"column":2},"end":{"row":174,"column":3},"action":"remove","lines":["f"]},{"start":{"row":174,"column":1},"end":{"row":174,"column":2},"action":"remove","lines":["e"]},{"start":{"row":174,"column":0},"end":{"row":174,"column":1},"action":"remove","lines":["d"]},{"start":{"row":173,"column":43},"end":{"row":174,"column":0},"action":"remove","lines":["",""]},{"start":{"row":173,"column":42},"end":{"row":173,"column":43},"action":"remove","lines":[":"]}],[{"start":{"row":173,"column":42},"end":{"row":174,"column":0},"action":"insert","lines":["",""],"id":376},{"start":{"row":174,"column":0},"end":{"row":174,"column":1},"action":"insert","lines":["d"]},{"start":{"row":174,"column":1},"end":{"row":174,"column":2},"action":"insert","lines":["e"]},{"start":{"row":174,"column":2},"end":{"row":174,"column":3},"action":"insert","lines":["f"]}],[{"start":{"row":174,"column":3},"end":{"row":174,"column":4},"action":"insert","lines":[" "],"id":377},{"start":{"row":174,"column":4},"end":{"row":174,"column":5},"action":"insert","lines":["v"]},{"start":{"row":174,"column":5},"end":{"row":174,"column":6},"action":"insert","lines":["i"]},{"start":{"row":174,"column":6},"end":{"row":174,"column":7},"action":"insert","lines":["e"]},{"start":{"row":174,"column":7},"end":{"row":174,"column":8},"action":"insert","lines":["w"]}],[{"start":{"row":174,"column":8},"end":{"row":174,"column":9},"action":"insert","lines":["_"],"id":378},{"start":{"row":174,"column":9},"end":{"row":174,"column":10},"action":"insert","lines":["r"]},{"start":{"row":174,"column":10},"end":{"row":174,"column":11},"action":"insert","lines":["e"]},{"start":{"row":174,"column":11},"end":{"row":174,"column":12},"action":"insert","lines":["c"]},{"start":{"row":174,"column":12},"end":{"row":174,"column":13},"action":"insert","lines":["i"]},{"start":{"row":174,"column":13},"end":{"row":174,"column":14},"action":"insert","lines":["p"]},{"start":{"row":174,"column":14},"end":{"row":174,"column":15},"action":"insert","lines":["e"]},{"start":{"row":174,"column":15},"end":{"row":174,"column":16},"action":"insert","lines":["_"]},{"start":{"row":174,"column":16},"end":{"row":174,"column":17},"action":"insert","lines":["a"]},{"start":{"row":174,"column":17},"end":{"row":174,"column":18},"action":"insert","lines":["s"]}],[{"start":{"row":174,"column":18},"end":{"row":174,"column":19},"action":"insert","lines":["_"],"id":379},{"start":{"row":174,"column":19},"end":{"row":174,"column":20},"action":"insert","lines":["u"]},{"start":{"row":174,"column":20},"end":{"row":174,"column":21},"action":"insert","lines":["s"]},{"start":{"row":174,"column":21},"end":{"row":174,"column":22},"action":"insert","lines":["e"]},{"start":{"row":174,"column":22},"end":{"row":174,"column":23},"action":"insert","lines":["r"]}],[{"start":{"row":174,"column":23},"end":{"row":174,"column":25},"action":"insert","lines":["()"],"id":380}],[{"start":{"row":174,"column":24},"end":{"row":174,"column":25},"action":"insert","lines":["r"],"id":381},{"start":{"row":174,"column":25},"end":{"row":174,"column":26},"action":"insert","lines":["e"]},{"start":{"row":174,"column":26},"end":{"row":174,"column":27},"action":"insert","lines":["c"]},{"start":{"row":174,"column":27},"end":{"row":174,"column":28},"action":"insert","lines":["i"]},{"start":{"row":174,"column":28},"end":{"row":174,"column":29},"action":"insert","lines":["p"]},{"start":{"row":174,"column":29},"end":{"row":174,"column":30},"action":"insert","lines":["e"]},{"start":{"row":174,"column":30},"end":{"row":174,"column":31},"action":"insert","lines":["_"]},{"start":{"row":174,"column":31},"end":{"row":174,"column":32},"action":"insert","lines":["i"]}],[{"start":{"row":174,"column":32},"end":{"row":174,"column":33},"action":"insert","lines":["d"],"id":382},{"start":{"row":174,"column":33},"end":{"row":174,"column":34},"action":"insert","lines":[","]}],[{"start":{"row":174,"column":34},"end":{"row":174,"column":35},"action":"insert","lines":[" "],"id":383},{"start":{"row":174,"column":35},"end":{"row":174,"column":36},"action":"insert","lines":["u"]},{"start":{"row":174,"column":36},"end":{"row":174,"column":37},"action":"insert","lines":["s"]},{"start":{"row":174,"column":37},"end":{"row":174,"column":38},"action":"insert","lines":["e"]},{"start":{"row":174,"column":38},"end":{"row":174,"column":39},"action":"insert","lines":["r"]},{"start":{"row":174,"column":39},"end":{"row":174,"column":40},"action":"insert","lines":["_"]},{"start":{"row":174,"column":40},"end":{"row":174,"column":41},"action":"insert","lines":["i"]}],[{"start":{"row":174,"column":41},"end":{"row":174,"column":42},"action":"insert","lines":["d"],"id":384}],[{"start":{"row":174,"column":43},"end":{"row":174,"column":44},"action":"insert","lines":[":"],"id":385}],[{"start":{"row":174,"column":44},"end":{"row":175,"column":0},"action":"insert","lines":["",""],"id":386},{"start":{"row":175,"column":0},"end":{"row":175,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":175,"column":4},"end":{"row":175,"column":5},"action":"insert","lines":["u"],"id":387},{"start":{"row":175,"column":5},"end":{"row":175,"column":6},"action":"insert","lines":["s"]},{"start":{"row":175,"column":6},"end":{"row":175,"column":7},"action":"insert","lines":["e"]},{"start":{"row":175,"column":7},"end":{"row":175,"column":8},"action":"insert","lines":["r"]}],[{"start":{"row":175,"column":8},"end":{"row":175,"column":9},"action":"insert","lines":[" "],"id":388},{"start":{"row":175,"column":9},"end":{"row":175,"column":10},"action":"insert","lines":["="]}],[{"start":{"row":175,"column":10},"end":{"row":175,"column":11},"action":"insert","lines":[" "],"id":389}],[{"start":{"row":175,"column":4},"end":{"row":175,"column":11},"action":"remove","lines":["user = "],"id":390},{"start":{"row":175,"column":4},"end":{"row":175,"column":62},"action":"insert","lines":["user = mongo.db.users.find_one({'_id': ObjectId(user_id)})"]}],[{"start":{"row":176,"column":0},"end":{"row":176,"column":4},"action":"insert","lines":["    "],"id":391}],[{"start":{"row":175,"column":62},"end":{"row":176,"column":0},"action":"insert","lines":["",""],"id":392},{"start":{"row":176,"column":0},"end":{"row":176,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":176,"column":4},"end":{"row":176,"column":68},"action":"insert","lines":["recipe = mongo.db.recipes.find_one({'_id': ObjectId(recipe_id)})"],"id":393}],[{"start":{"row":176,"column":68},"end":{"row":177,"column":0},"action":"insert","lines":["",""],"id":394},{"start":{"row":177,"column":0},"end":{"row":177,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":177,"column":4},"end":{"row":177,"column":56},"action":"insert","lines":["return render_template('recipe.html', recipe=recipe)"],"id":395}],[{"start":{"row":177,"column":55},"end":{"row":177,"column":56},"action":"insert","lines":[","],"id":396}],[{"start":{"row":177,"column":56},"end":{"row":177,"column":57},"action":"insert","lines":[" "],"id":397},{"start":{"row":177,"column":57},"end":{"row":177,"column":58},"action":"insert","lines":["u"]},{"start":{"row":177,"column":58},"end":{"row":177,"column":59},"action":"insert","lines":["s"]},{"start":{"row":177,"column":59},"end":{"row":177,"column":60},"action":"insert","lines":["e"]},{"start":{"row":177,"column":60},"end":{"row":177,"column":61},"action":"insert","lines":["r"]},{"start":{"row":177,"column":61},"end":{"row":177,"column":62},"action":"insert","lines":["="]}],[{"start":{"row":177,"column":62},"end":{"row":177,"column":63},"action":"insert","lines":[" "],"id":398}],[{"start":{"row":177,"column":62},"end":{"row":177,"column":63},"action":"remove","lines":[" "],"id":399}],[{"start":{"row":177,"column":62},"end":{"row":177,"column":63},"action":"insert","lines":["u"],"id":400},{"start":{"row":177,"column":63},"end":{"row":177,"column":64},"action":"insert","lines":["s"]},{"start":{"row":177,"column":64},"end":{"row":177,"column":65},"action":"insert","lines":["e"]},{"start":{"row":177,"column":65},"end":{"row":177,"column":66},"action":"insert","lines":["r"]}],[{"start":{"row":173,"column":40},"end":{"row":173,"column":41},"action":"insert","lines":[">"],"id":401}],[{"start":{"row":21,"column":0},"end":{"row":22,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""],"id":402,"ignore":true},{"start":{"row":24,"column":0},"end":{"row":27,"column":0},"action":"insert","lines":["=======","    return render_template(\"home.html\")",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1",""]},{"start":{"row":62,"column":0},"end":{"row":63,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":65,"column":0},"end":{"row":68,"column":0},"action":"insert","lines":["=======","    return render_template('home.html', user=user)",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1",""]},{"start":{"row":78,"column":0},"end":{"row":79,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":86,"column":0},"end":{"row":92,"column":0},"action":"insert","lines":["=======","    date_and_time = datetime.datetime.now()","    prep_time = int(request.form.get('prep_time'))","    cook_time = int(request.form.get('cook_time'))","    total_time = prep_time + cook_time",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1",""]},{"start":{"row":98,"column":0},"end":{"row":99,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":104,"column":0},"end":{"row":106,"column":0},"action":"insert","lines":["=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1",""]},{"start":{"row":117,"column":0},"end":{"row":121,"column":0},"action":"insert","lines":["<<<<<<< HEAD","=======","        'meal_image': request.form.get('meal_image'),",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1",""]},{"start":{"row":125,"column":0},"end":{"row":126,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":128,"column":0},"end":{"row":130,"column":0},"action":"insert","lines":["=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1",""]},{"start":{"row":148,"column":0},"end":{"row":148,"column":4},"action":"remove","lines":["    "]},{"start":{"row":148,"column":0},"end":{"row":151,"column":48},"action":"insert","lines":["<<<<<<< HEAD","    ","=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"]},{"start":{"row":157,"column":0},"end":{"row":158,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":161,"column":0},"end":{"row":165,"column":0},"action":"insert","lines":["=======","    ingredients = {}","    methods = {}",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1",""]},{"start":{"row":170,"column":0},"end":{"row":171,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":191,"column":0},"end":{"row":209,"column":0},"action":"insert","lines":["=======","                    ingredient_value = (\"%s %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","                else:","                    ingredient_value = (\"%s %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","            elif request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","                ingredient_value = (\"%s of %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","            else:","                ingredient_value = (\"%s of %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","    for x in range(1, 11):","        method_step = 'method_step['+str(x)+']'","        if request.form.get(\"method[\"+str(x)+\"]\") != None:","            method_value = request.form.get(\"method[\"+str(x)+\"]\")","            methods.update({method_step: method_value})",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1",""]},{"start":{"row":217,"column":0},"end":{"row":218,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":231,"column":4},"end":{"row":238,"column":48},"action":"insert","lines":["","=======","    user_recipes = mongo.db.recipes.find_one({'username': user['username']})","    ingredients = user_recipes.get(\"ingredients\")","    print(ingredients)","    return render_template('myrecipes.html', user_recipes=user_recipes, user=user, ingredients=ingredients)","",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"]}],[{"start":{"row":0,"column":0},"end":{"row":243,"column":23},"action":"remove","lines":["import os","from flask import Flask, render_template, redirect, request, url_for, flash","from flask_pymongo import PyMongo","import datetime","from bson.objectid import ObjectId","","","","result = \"\"","","app = Flask(__name__)","app.secret_key = \"mysecretkey\"","app.config[\"MONGO_DBNAME\"] = 'cook_book'","app.config[\"MONGO_URI\"] = 'mongodb+srv://jraysim:OrganD0NER@myfirstcluster-hdrnx.mongodb.net/cook_book?retryWrites=true&w=majority'","","mongo = PyMongo(app)","","","@app.route('/')","@app.route('/home')","def home():","<<<<<<< HEAD","    recipes = mongo.db.recipes.find()","    return render_template(\"home.html\", recipes=recipes)","=======","    return render_template(\"home.html\")",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    ","@app.route('/sign_up')","def sign_up():","    return render_template('signup.html')","","@app.route('/add_user/failed', methods=[\"POST\", \"GET\"])","def add_user():","    newuser = mongo.db.users.count({'username': request.form.get('username')})","    if request.method == 'POST':","        if newuser > 0:","            error = \"{0} has already been taken\".format(request.form.get('username'))","        else:","            flash(\"Your account has been created, log in to continue\")","            mongo.db.users.insert_one(request.form.to_dict())","            return redirect('sign_in')","    return render_template('signup.html', error=error)","        ","@app.route('/sign_in')","def sign_in():","    return render_template('signin.html')","    ","@app.route('/log_in/failed', methods=[\"POST\"])","def log_in():","    users = mongo.db.users.find({'username': request.form.get('username'), 'password': request.form.get('password')})","    if request.method == 'POST':","        if users.count() > 0:","            user = mongo.db.users.find_one({'username': request.form.get('username'), 'password': request.form.get('password')})","        else:","            error = \"Sorry, your Username or Password is incorrect\"","            return render_template('signin.html', error = error)","    return redirect(url_for('user_home', user_id=user['_id']))","            ","@app.route('/home/<user_id>')","def user_home(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","<<<<<<< HEAD","    recipes = mongo.db.recipes.find()","    return render_template('home.html', user=user, recipes=recipes)","=======","    return render_template('home.html', user=user)",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    ","@app.route('/add_recipe/<user_id>')","def add_recipe(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","    meal_types = mongo.db.meal_type.find()","    return render_template('addrecipe.html', user=user, meal_types=meal_types)","    ","@app.route('/insert_recipe/<user_id>', methods=[\"POST\", \"GET\"])","def insert_recipe(user_id):","    user = mongo.db.users.find_one({\"_id\": ObjectId(user_id)})","<<<<<<< HEAD","    ","    date_and_time = datetime.datetime.now()","    ","    prep_time = int(request.form.get('prep_time'))","    cook_time = int(request.form.get('cook_time'))","    total_time = prep_time + cook_time","    ","=======","    date_and_time = datetime.datetime.now()","    prep_time = int(request.form.get('prep_time'))","    cook_time = int(request.form.get('cook_time'))","    total_time = prep_time + cook_time",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    if total_time >= 60 and total_time // 60 == 1:","        total_time_string = str(total_time // 60)+\" hour \"+ str(total_time % 60)+\" minutes\"","    elif total_time >= 60:","        total_time_string = str(total_time // 60)+\" hours \"+ str(total_time % 60)+\" minutes\"","    else:","        total_time_string = str(total_time)+\" minutes\"","<<<<<<< HEAD","        ","    if int(request.form.get('serves')) == 1:","        serves = request.form.get('serves') + \" person\"","    else:","        serves = request.form.get('serves') + \" people\"","=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    ","    new_insert = {","        'username': request.form.get('username'),","        'country': request.form.get('country'),","        'meal_name': request.form.get('meal_name'),","        'prep_time': str(prep_time)+\" minutes\",","        'cook_time': str(cook_time)+\" minutes\",","        'meal_type': request.form.get('meal_type'),","        'date_and_time': date_and_time,","        'date_added': date_and_time.strftime(\"%d %B, %Y\"),","        'favourite_count': 0,","<<<<<<< HEAD","=======","        'meal_image': request.form.get('meal_image'),",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","        'total_time': total_time_string,","        'vegetarian': request.form.get('vegetarian'),","        'vegan': request.form.get('vegan'),","        'gluten_free': request.form.get('gluten_free'),","<<<<<<< HEAD","        'meal_desc': request.form.get('meal_desc'),","        'serves': serves","=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    }","    ","    allergen_results = {","        'celery': request.form.get('celery'),","        'gluten': request.form.get('gluten'),","        'crustaceans': request.form.get('crustaceans'),","        'egg': request.form.get('egg'),","        'fish': request.form.get('fish'),","        'lupin': request.form.get('lupin'),","        'milk': request.form.get('milk'),","        'molluscs': request.form.get('molluscs'),","        'mustard': request.form.get('mustard'),","        'nuts': request.form.get('nuts'),","        'peanuts': request.form.get('peanuts'),","        'sesame_seeds': request.form.get('sesame_seeds'),","        'soya': request.form.get('soya'),","        'sulpher_dioxide': request.form.get('sulpher_dioxide')","    }","<<<<<<< HEAD","    ","=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    allergens = {}","    for allergen in allergen_results:","        if allergen_results[allergen] != None:","            allergens.update({allergen: allergen_results[allergen]})","    new_insert.update({'allergens': allergens})","<<<<<<< HEAD","    ","    ingredients = {}","    ","=======","    ingredients = {}","    methods = {}",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    for x in range(1, 21):","        ingredient_name = 'ingredient['+str(x)+']'","        if request.form.get(\"amount[\"+str(x)+\"]\") != None:","            if request.form.get(\"amount[\"+str(x)+\"]\").isdigit():","                if request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","<<<<<<< HEAD","                    ingredient_value = (\"%s %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\").lower()))","                    ingredients.update({ingredient_name: ingredient_value})","                else:","                    ingredient_value = (\"%s %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\").lower(), request.form.get(\"prep[\"+str(x)+\"]\").lower()))","                    ingredients.update({ingredient_name: ingredient_value})","            elif request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","                ingredient_value = (\"%s of %s\" %(request.form.get(\"amount[\"+str(x)+\"]\").capitalize(), request.form.get(\"ingredient[\"+str(x)+\"]\").lower()))","                ingredients.update({ingredient_name: ingredient_value})","            else:","                ingredient_value = (\"%s of %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\").capitalize(), request.form.get(\"ingredient[\"+str(x)+\"]\").lower(), request.form.get(\"prep[\"+str(x)+\"]\").lower()))","                ingredients.update({ingredient_name: ingredient_value})","    ","    methods = {}","    ","    for x in range(1, 11):","        method_step = 'method_step['+str(x)+']'","        if request.form.get(\"method[\"+str(x)+\"]\") != None:","            method_value = request.form.get(\"method[\"+str(x)+\"]\").capitalize()","            methods.update({method_step: method_value})","            ","=======","                    ingredient_value = (\"%s %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","                else:","                    ingredient_value = (\"%s %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","            elif request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","                ingredient_value = (\"%s of %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","            else:","                ingredient_value = (\"%s of %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","    for x in range(1, 11):","        method_step = 'method_step['+str(x)+']'","        if request.form.get(\"method[\"+str(x)+\"]\") != None:","            method_value = request.form.get(\"method[\"+str(x)+\"]\")","            methods.update({method_step: method_value})",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    new_insert.update({'ingredients': ingredients})","    new_insert.update({'methods': methods})","    mongo.db.recipes.insert_one(new_insert)","    return redirect(url_for(\"get_user_recipes\", user_id = user_id))","    ","@app.route('/my_recipes/<user_id>')","def get_user_recipes(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","<<<<<<< HEAD","    user_recipes = mongo.db.recipes.find({'username': user['username']})","    return render_template('myrecipes.html', user_recipes=user_recipes, user=user)","    ","@app.route('/recipe/<recipe_id>')","def view_recipe(recipe_id):","    recipe = mongo.db.recipes.find_one({'_id': ObjectId(recipe_id)})","    return render_template('recipe.html', recipe=recipe)","    ","@app.route('/recipe/<recipe_id>/<user_id>')","def view_recipe_as_user(recipe_id, user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","    recipe = mongo.db.recipes.find_one({'_id': ObjectId(recipe_id)})","    return render_template('recipe.html', recipe=recipe, user=user)","    ","=======","    user_recipes = mongo.db.recipes.find_one({'username': user['username']})","    ingredients = user_recipes.get(\"ingredients\")","    print(ingredients)","    return render_template('myrecipes.html', user_recipes=user_recipes, user=user, ingredients=ingredients)","",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","","if __name__ == '__main__':","    app.run(host=os.environ.get('IP'),","            port=int(os.environ.get('PORT')),","            debug=True)"],"id":439},{"start":{"row":0,"column":0},"end":{"row":157,"column":23},"action":"insert","lines":["import os","from flask import Flask, render_template, redirect, request, url_for, flash","from flask_pymongo import PyMongo","import datetime","from bson.objectid import ObjectId","","","","result = \"\"","","app = Flask(__name__)","app.secret_key = \"mysecretkey\"","app.config[\"MONGO_DBNAME\"] = 'cook_book'","app.config[\"MONGO_URI\"] = 'mongodb+srv://jraysim:OrganD0NER@myfirstcluster-hdrnx.mongodb.net/cook_book?retryWrites=true&w=majority'","","mongo = PyMongo(app)","","","@app.route('/')","@app.route('/home')","def home():","    return render_template(\"home.html\")","    ","@app.route('/sign_up')","def sign_up():","    return render_template('signup.html')","","@app.route('/add_user/failed', methods=[\"POST\", \"GET\"])","def add_user():","    newuser = mongo.db.users.count({'username': request.form.get('username')})","    if request.method == 'POST':","        if newuser > 0:","            error = \"{0} has already been taken\".format(request.form.get('username'))","        else:","            flash(\"Your account has been created, log in to continue\")","            mongo.db.users.insert_one(request.form.to_dict())","            return redirect('sign_in')","    return render_template('signup.html', error=error)","        ","@app.route('/sign_in')","def sign_in():","    return render_template('signin.html')","    ","@app.route('/log_in/failed', methods=[\"POST\"])","def log_in():","    users = mongo.db.users.find({'username': request.form.get('username'), 'password': request.form.get('password')})","    if request.method == 'POST':","        if users.count() > 0:","            user = mongo.db.users.find_one({'username': request.form.get('username'), 'password': request.form.get('password')})","        else:","            error = \"Sorry, your Username or Password is incorrect\"","            return render_template('signin.html', error = error)","    return redirect(url_for('user_home', user_id=user['_id']))","            ","@app.route('/home/<user_id>')","def user_home(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","    return render_template('home.html', user=user)","    ","@app.route('/add_recipe/<user_id>')","def add_recipe(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","    meal_types = mongo.db.meal_type.find()","    return render_template('addrecipe.html', user=user, meal_types=meal_types)","    ","@app.route('/insert_recipe/<user_id>', methods=[\"POST\", \"GET\"])","def insert_recipe(user_id):","    user = mongo.db.users.find_one({\"_id\": ObjectId(user_id)})","    date_and_time = datetime.datetime.now()","    prep_time = int(request.form.get('prep_time'))","    cook_time = int(request.form.get('cook_time'))","    total_time = prep_time + cook_time","    if total_time >= 60 and total_time // 60 == 1:","        total_time_string = str(total_time // 60)+\" hour \"+ str(total_time % 60)+\" minutes\"","    elif total_time >= 60:","        total_time_string = str(total_time // 60)+\" hours \"+ str(total_time % 60)+\" minutes\"","    else:","        total_time_string = str(total_time)+\" minutes\"","    ","    new_insert = {","        'username': request.form.get('username'),","        'country': request.form.get('country'),","        'meal_name': request.form.get('meal_name'),","        'prep_time': str(prep_time)+\" minutes\",","        'cook_time': str(cook_time)+\" minutes\",","        'meal_type': request.form.get('meal_type'),","        'date_and_time': date_and_time,","        'date_added': date_and_time.strftime(\"%d %B, %Y\"),","        'favourite_count': 0,","        'meal_image': request.form.get('meal_image'),","        'total_time': total_time_string,","        'vegetarian': request.form.get('vegetarian'),","        'vegan': request.form.get('vegan'),","        'gluten_free': request.form.get('gluten_free'),","    }","    ","    allergen_results = {","        'celery': request.form.get('celery'),","        'gluten': request.form.get('gluten'),","        'crustaceans': request.form.get('crustaceans'),","        'egg': request.form.get('egg'),","        'fish': request.form.get('fish'),","        'lupin': request.form.get('lupin'),","        'milk': request.form.get('milk'),","        'molluscs': request.form.get('molluscs'),","        'mustard': request.form.get('mustard'),","        'nuts': request.form.get('nuts'),","        'peanuts': request.form.get('peanuts'),","        'sesame_seeds': request.form.get('sesame_seeds'),","        'soya': request.form.get('soya'),","        'sulpher_dioxide': request.form.get('sulpher_dioxide')","    }","    allergens = {}","    for allergen in allergen_results:","        if allergen_results[allergen] != None:","            allergens.update({allergen: allergen_results[allergen]})","    new_insert.update({'allergens': allergens})","    ingredients = {}","    methods = {}","    for x in range(1, 21):","        ingredient_name = 'ingredient['+str(x)+']'","        if request.form.get(\"amount[\"+str(x)+\"]\") != None:","            if request.form.get(\"amount[\"+str(x)+\"]\").isdigit():","                if request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","                    ingredient_value = (\"%s %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","                else:","                    ingredient_value = (\"%s %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","            elif request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","                ingredient_value = (\"%s of %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","            else:","                ingredient_value = (\"%s of %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","    for x in range(1, 11):","        method_step = 'method_step['+str(x)+']'","        if request.form.get(\"method[\"+str(x)+\"]\") != None:","            method_value = request.form.get(\"method[\"+str(x)+\"]\")","            methods.update({method_step: method_value})","    new_insert.update({'ingredients': ingredients})","    new_insert.update({'methods': methods})","    mongo.db.recipes.insert_one(new_insert)","    return redirect(url_for(\"get_user_recipes\", user_id = user_id))","    ","@app.route('/my_recipes/<user_id>')","def get_user_recipes(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","    user_recipes = mongo.db.recipes.find_one({'username': user['username']})","    ingredients = user_recipes.get(\"ingredients\")","    print(ingredients)","    return render_template('myrecipes.html', user_recipes=user_recipes, user=user, ingredients=ingredients)","","","if __name__ == '__main__':","    app.run(host=os.environ.get('IP'),","            port=int(os.environ.get('PORT')),","            debug=True)"]}],[{"start":{"row":0,"column":0},"end":{"row":157,"column":23},"action":"remove","lines":["import os","from flask import Flask, render_template, redirect, request, url_for, flash","from flask_pymongo import PyMongo","import datetime","from bson.objectid import ObjectId","","","","result = \"\"","","app = Flask(__name__)","app.secret_key = \"mysecretkey\"","app.config[\"MONGO_DBNAME\"] = 'cook_book'","app.config[\"MONGO_URI\"] = 'mongodb+srv://jraysim:OrganD0NER@myfirstcluster-hdrnx.mongodb.net/cook_book?retryWrites=true&w=majority'","","mongo = PyMongo(app)","","","@app.route('/')","@app.route('/home')","def home():","    return render_template(\"home.html\")","    ","@app.route('/sign_up')","def sign_up():","    return render_template('signup.html')","","@app.route('/add_user/failed', methods=[\"POST\", \"GET\"])","def add_user():","    newuser = mongo.db.users.count({'username': request.form.get('username')})","    if request.method == 'POST':","        if newuser > 0:","            error = \"{0} has already been taken\".format(request.form.get('username'))","        else:","            flash(\"Your account has been created, log in to continue\")","            mongo.db.users.insert_one(request.form.to_dict())","            return redirect('sign_in')","    return render_template('signup.html', error=error)","        ","@app.route('/sign_in')","def sign_in():","    return render_template('signin.html')","    ","@app.route('/log_in/failed', methods=[\"POST\"])","def log_in():","    users = mongo.db.users.find({'username': request.form.get('username'), 'password': request.form.get('password')})","    if request.method == 'POST':","        if users.count() > 0:","            user = mongo.db.users.find_one({'username': request.form.get('username'), 'password': request.form.get('password')})","        else:","            error = \"Sorry, your Username or Password is incorrect\"","            return render_template('signin.html', error = error)","    return redirect(url_for('user_home', user_id=user['_id']))","            ","@app.route('/home/<user_id>')","def user_home(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","    return render_template('home.html', user=user)","    ","@app.route('/add_recipe/<user_id>')","def add_recipe(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","    meal_types = mongo.db.meal_type.find()","    return render_template('addrecipe.html', user=user, meal_types=meal_types)","    ","@app.route('/insert_recipe/<user_id>', methods=[\"POST\", \"GET\"])","def insert_recipe(user_id):","    user = mongo.db.users.find_one({\"_id\": ObjectId(user_id)})","    date_and_time = datetime.datetime.now()","    prep_time = int(request.form.get('prep_time'))","    cook_time = int(request.form.get('cook_time'))","    total_time = prep_time + cook_time","    if total_time >= 60 and total_time // 60 == 1:","        total_time_string = str(total_time // 60)+\" hour \"+ str(total_time % 60)+\" minutes\"","    elif total_time >= 60:","        total_time_string = str(total_time // 60)+\" hours \"+ str(total_time % 60)+\" minutes\"","    else:","        total_time_string = str(total_time)+\" minutes\"","    ","    new_insert = {","        'username': request.form.get('username'),","        'country': request.form.get('country'),","        'meal_name': request.form.get('meal_name'),","        'prep_time': str(prep_time)+\" minutes\",","        'cook_time': str(cook_time)+\" minutes\",","        'meal_type': request.form.get('meal_type'),","        'date_and_time': date_and_time,","        'date_added': date_and_time.strftime(\"%d %B, %Y\"),","        'favourite_count': 0,","        'meal_image': request.form.get('meal_image'),","        'total_time': total_time_string,","        'vegetarian': request.form.get('vegetarian'),","        'vegan': request.form.get('vegan'),","        'gluten_free': request.form.get('gluten_free'),","    }","    ","    allergen_results = {","        'celery': request.form.get('celery'),","        'gluten': request.form.get('gluten'),","        'crustaceans': request.form.get('crustaceans'),","        'egg': request.form.get('egg'),","        'fish': request.form.get('fish'),","        'lupin': request.form.get('lupin'),","        'milk': request.form.get('milk'),","        'molluscs': request.form.get('molluscs'),","        'mustard': request.form.get('mustard'),","        'nuts': request.form.get('nuts'),","        'peanuts': request.form.get('peanuts'),","        'sesame_seeds': request.form.get('sesame_seeds'),","        'soya': request.form.get('soya'),","        'sulpher_dioxide': request.form.get('sulpher_dioxide')","    }","    allergens = {}","    for allergen in allergen_results:","        if allergen_results[allergen] != None:","            allergens.update({allergen: allergen_results[allergen]})","    new_insert.update({'allergens': allergens})","    ingredients = {}","    methods = {}","    for x in range(1, 21):","        ingredient_name = 'ingredient['+str(x)+']'","        if request.form.get(\"amount[\"+str(x)+\"]\") != None:","            if request.form.get(\"amount[\"+str(x)+\"]\").isdigit():","                if request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","                    ingredient_value = (\"%s %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","                else:","                    ingredient_value = (\"%s %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","            elif request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","                ingredient_value = (\"%s of %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","            else:","                ingredient_value = (\"%s of %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","    for x in range(1, 11):","        method_step = 'method_step['+str(x)+']'","        if request.form.get(\"method[\"+str(x)+\"]\") != None:","            method_value = request.form.get(\"method[\"+str(x)+\"]\")","            methods.update({method_step: method_value})","    new_insert.update({'ingredients': ingredients})","    new_insert.update({'methods': methods})","    mongo.db.recipes.insert_one(new_insert)","    return redirect(url_for(\"get_user_recipes\", user_id = user_id))","    ","@app.route('/my_recipes/<user_id>')","def get_user_recipes(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","    user_recipes = mongo.db.recipes.find_one({'username': user['username']})","    ingredients = user_recipes.get(\"ingredients\")","    print(ingredients)","    return render_template('myrecipes.html', user_recipes=user_recipes, user=user, ingredients=ingredients)","","","if __name__ == '__main__':","    app.run(host=os.environ.get('IP'),","            port=int(os.environ.get('PORT')),","            debug=True)"],"id":440},{"start":{"row":0,"column":0},"end":{"row":243,"column":23},"action":"insert","lines":["import os","from flask import Flask, render_template, redirect, request, url_for, flash","from flask_pymongo import PyMongo","import datetime","from bson.objectid import ObjectId","","","","result = \"\"","","app = Flask(__name__)","app.secret_key = \"mysecretkey\"","app.config[\"MONGO_DBNAME\"] = 'cook_book'","app.config[\"MONGO_URI\"] = 'mongodb+srv://jraysim:OrganD0NER@myfirstcluster-hdrnx.mongodb.net/cook_book?retryWrites=true&w=majority'","","mongo = PyMongo(app)","","","@app.route('/')","@app.route('/home')","def home():","<<<<<<< HEAD","    recipes = mongo.db.recipes.find()","    return render_template(\"home.html\", recipes=recipes)","=======","    return render_template(\"home.html\")",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    ","@app.route('/sign_up')","def sign_up():","    return render_template('signup.html')","","@app.route('/add_user/failed', methods=[\"POST\", \"GET\"])","def add_user():","    newuser = mongo.db.users.count({'username': request.form.get('username')})","    if request.method == 'POST':","        if newuser > 0:","            error = \"{0} has already been taken\".format(request.form.get('username'))","        else:","            flash(\"Your account has been created, log in to continue\")","            mongo.db.users.insert_one(request.form.to_dict())","            return redirect('sign_in')","    return render_template('signup.html', error=error)","        ","@app.route('/sign_in')","def sign_in():","    return render_template('signin.html')","    ","@app.route('/log_in/failed', methods=[\"POST\"])","def log_in():","    users = mongo.db.users.find({'username': request.form.get('username'), 'password': request.form.get('password')})","    if request.method == 'POST':","        if users.count() > 0:","            user = mongo.db.users.find_one({'username': request.form.get('username'), 'password': request.form.get('password')})","        else:","            error = \"Sorry, your Username or Password is incorrect\"","            return render_template('signin.html', error = error)","    return redirect(url_for('user_home', user_id=user['_id']))","            ","@app.route('/home/<user_id>')","def user_home(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","<<<<<<< HEAD","    recipes = mongo.db.recipes.find()","    return render_template('home.html', user=user, recipes=recipes)","=======","    return render_template('home.html', user=user)",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    ","@app.route('/add_recipe/<user_id>')","def add_recipe(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","    meal_types = mongo.db.meal_type.find()","    return render_template('addrecipe.html', user=user, meal_types=meal_types)","    ","@app.route('/insert_recipe/<user_id>', methods=[\"POST\", \"GET\"])","def insert_recipe(user_id):","    user = mongo.db.users.find_one({\"_id\": ObjectId(user_id)})","<<<<<<< HEAD","    ","    date_and_time = datetime.datetime.now()","    ","    prep_time = int(request.form.get('prep_time'))","    cook_time = int(request.form.get('cook_time'))","    total_time = prep_time + cook_time","    ","=======","    date_and_time = datetime.datetime.now()","    prep_time = int(request.form.get('prep_time'))","    cook_time = int(request.form.get('cook_time'))","    total_time = prep_time + cook_time",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    if total_time >= 60 and total_time // 60 == 1:","        total_time_string = str(total_time // 60)+\" hour \"+ str(total_time % 60)+\" minutes\"","    elif total_time >= 60:","        total_time_string = str(total_time // 60)+\" hours \"+ str(total_time % 60)+\" minutes\"","    else:","        total_time_string = str(total_time)+\" minutes\"","<<<<<<< HEAD","        ","    if int(request.form.get('serves')) == 1:","        serves = request.form.get('serves') + \" person\"","    else:","        serves = request.form.get('serves') + \" people\"","=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    ","    new_insert = {","        'username': request.form.get('username'),","        'country': request.form.get('country'),","        'meal_name': request.form.get('meal_name'),","        'prep_time': str(prep_time)+\" minutes\",","        'cook_time': str(cook_time)+\" minutes\",","        'meal_type': request.form.get('meal_type'),","        'date_and_time': date_and_time,","        'date_added': date_and_time.strftime(\"%d %B, %Y\"),","        'favourite_count': 0,","<<<<<<< HEAD","=======","        'meal_image': request.form.get('meal_image'),",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","        'total_time': total_time_string,","        'vegetarian': request.form.get('vegetarian'),","        'vegan': request.form.get('vegan'),","        'gluten_free': request.form.get('gluten_free'),","<<<<<<< HEAD","        'meal_desc': request.form.get('meal_desc'),","        'serves': serves","=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    }","    ","    allergen_results = {","        'celery': request.form.get('celery'),","        'gluten': request.form.get('gluten'),","        'crustaceans': request.form.get('crustaceans'),","        'egg': request.form.get('egg'),","        'fish': request.form.get('fish'),","        'lupin': request.form.get('lupin'),","        'milk': request.form.get('milk'),","        'molluscs': request.form.get('molluscs'),","        'mustard': request.form.get('mustard'),","        'nuts': request.form.get('nuts'),","        'peanuts': request.form.get('peanuts'),","        'sesame_seeds': request.form.get('sesame_seeds'),","        'soya': request.form.get('soya'),","        'sulpher_dioxide': request.form.get('sulpher_dioxide')","    }","<<<<<<< HEAD","    ","=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    allergens = {}","    for allergen in allergen_results:","        if allergen_results[allergen] != None:","            allergens.update({allergen: allergen_results[allergen]})","    new_insert.update({'allergens': allergens})","<<<<<<< HEAD","    ","    ingredients = {}","    ","=======","    ingredients = {}","    methods = {}",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    for x in range(1, 21):","        ingredient_name = 'ingredient['+str(x)+']'","        if request.form.get(\"amount[\"+str(x)+\"]\") != None:","            if request.form.get(\"amount[\"+str(x)+\"]\").isdigit():","                if request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","<<<<<<< HEAD","                    ingredient_value = (\"%s %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\").lower()))","                    ingredients.update({ingredient_name: ingredient_value})","                else:","                    ingredient_value = (\"%s %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\").lower(), request.form.get(\"prep[\"+str(x)+\"]\").lower()))","                    ingredients.update({ingredient_name: ingredient_value})","            elif request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","                ingredient_value = (\"%s of %s\" %(request.form.get(\"amount[\"+str(x)+\"]\").capitalize(), request.form.get(\"ingredient[\"+str(x)+\"]\").lower()))","                ingredients.update({ingredient_name: ingredient_value})","            else:","                ingredient_value = (\"%s of %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\").capitalize(), request.form.get(\"ingredient[\"+str(x)+\"]\").lower(), request.form.get(\"prep[\"+str(x)+\"]\").lower()))","                ingredients.update({ingredient_name: ingredient_value})","    ","    methods = {}","    ","    for x in range(1, 11):","        method_step = 'method_step['+str(x)+']'","        if request.form.get(\"method[\"+str(x)+\"]\") != None:","            method_value = request.form.get(\"method[\"+str(x)+\"]\").capitalize()","            methods.update({method_step: method_value})","            ","=======","                    ingredient_value = (\"%s %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","                else:","                    ingredient_value = (\"%s %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","            elif request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","                ingredient_value = (\"%s of %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","            else:","                ingredient_value = (\"%s of %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","    for x in range(1, 11):","        method_step = 'method_step['+str(x)+']'","        if request.form.get(\"method[\"+str(x)+\"]\") != None:","            method_value = request.form.get(\"method[\"+str(x)+\"]\")","            methods.update({method_step: method_value})",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","    new_insert.update({'ingredients': ingredients})","    new_insert.update({'methods': methods})","    mongo.db.recipes.insert_one(new_insert)","    return redirect(url_for(\"get_user_recipes\", user_id = user_id))","    ","@app.route('/my_recipes/<user_id>')","def get_user_recipes(user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","<<<<<<< HEAD","    user_recipes = mongo.db.recipes.find({'username': user['username']})","    return render_template('myrecipes.html', user_recipes=user_recipes, user=user)","    ","@app.route('/recipe/<recipe_id>')","def view_recipe(recipe_id):","    recipe = mongo.db.recipes.find_one({'_id': ObjectId(recipe_id)})","    return render_template('recipe.html', recipe=recipe)","    ","@app.route('/recipe/<recipe_id>/<user_id>')","def view_recipe_as_user(recipe_id, user_id):","    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})","    recipe = mongo.db.recipes.find_one({'_id': ObjectId(recipe_id)})","    return render_template('recipe.html', recipe=recipe, user=user)","    ","=======","    user_recipes = mongo.db.recipes.find_one({'username': user['username']})","    ingredients = user_recipes.get(\"ingredients\")","    print(ingredients)","    return render_template('myrecipes.html', user_recipes=user_recipes, user=user, ingredients=ingredients)","",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1","","if __name__ == '__main__':","    app.run(host=os.environ.get('IP'),","            port=int(os.environ.get('PORT')),","            debug=True)"]}],[{"start":{"row":230,"column":67},"end":{"row":238,"column":48},"action":"remove","lines":["","    ","=======","    user_recipes = mongo.db.recipes.find_one({'username': user['username']})","    ingredients = user_recipes.get(\"ingredients\")","    print(ingredients)","    return render_template('myrecipes.html', user_recipes=user_recipes, user=user, ingredients=ingredients)","",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"],"id":441}],[{"start":{"row":216,"column":62},"end":{"row":217,"column":12},"action":"remove","lines":["","<<<<<<< HEAD"],"id":442}],[{"start":{"row":189,"column":55},"end":{"row":208,"column":48},"action":"remove","lines":["","            ","=======","                    ingredient_value = (\"%s %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","                else:","                    ingredient_value = (\"%s %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                    ingredients.update({ingredient_name: ingredient_value})","            elif request.form.get(\"prep[\"+str(x)+\"]\") == \"\":","                ingredient_value = (\"%s of %s\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","            else:","                ingredient_value = (\"%s of %s (%s)\" %(request.form.get(\"amount[\"+str(x)+\"]\"), request.form.get(\"ingredient[\"+str(x)+\"]\"), request.form.get(\"prep[\"+str(x)+\"]\")))","                ingredients.update({ingredient_name: ingredient_value})","    for x in range(1, 11):","        method_step = 'method_step['+str(x)+']'","        if request.form.get(\"method[\"+str(x)+\"]\") != None:","            method_value = request.form.get(\"method[\"+str(x)+\"]\")","            methods.update({method_step: method_value})",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"],"id":443}],[{"start":{"row":169,"column":62},"end":{"row":170,"column":12},"action":"remove","lines":["","<<<<<<< HEAD"],"id":444}],[{"start":{"row":159,"column":20},"end":{"row":164,"column":48},"action":"remove","lines":["","    ","=======","    ingredients = {}","    methods = {}",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"],"id":445}],[{"start":{"row":159,"column":20},"end":{"row":160,"column":0},"action":"insert","lines":["",""],"id":446},{"start":{"row":160,"column":0},"end":{"row":160,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":156,"column":47},"end":{"row":158,"column":4},"action":"remove","lines":["","<<<<<<< HEAD","    "],"id":447}],[{"start":{"row":156,"column":47},"end":{"row":157,"column":0},"action":"insert","lines":["",""],"id":448},{"start":{"row":157,"column":0},"end":{"row":157,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":147,"column":5},"end":{"row":151,"column":48},"action":"remove","lines":["","<<<<<<< HEAD","    ","=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"],"id":449}],[{"start":{"row":147,"column":5},"end":{"row":148,"column":0},"action":"insert","lines":["",""],"id":450},{"start":{"row":148,"column":0},"end":{"row":148,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":127,"column":24},"end":{"row":129,"column":48},"action":"remove","lines":["","=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"],"id":451}],[{"start":{"row":127,"column":24},"end":{"row":128,"column":0},"action":"insert","lines":["",""],"id":452},{"start":{"row":128,"column":0},"end":{"row":128,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":124,"column":55},"end":{"row":125,"column":12},"action":"remove","lines":["","<<<<<<< HEAD"],"id":453}],[{"start":{"row":116,"column":29},"end":{"row":120,"column":48},"action":"remove","lines":["","<<<<<<< HEAD","=======","        'meal_image': request.form.get('meal_image'),",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"],"id":454}],[{"start":{"row":103,"column":55},"end":{"row":105,"column":48},"action":"remove","lines":["","=======",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"],"id":455}],[{"start":{"row":97,"column":54},"end":{"row":99,"column":8},"action":"remove","lines":["","<<<<<<< HEAD","        "],"id":456}],[{"start":{"row":84,"column":38},"end":{"row":91,"column":48},"action":"remove","lines":["","    ","=======","    date_and_time = datetime.datetime.now()","    prep_time = int(request.form.get('prep_time'))","    cook_time = int(request.form.get('cook_time'))","    total_time = prep_time + cook_time",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"],"id":457}],[{"start":{"row":77,"column":62},"end":{"row":79,"column":4},"action":"remove","lines":["","<<<<<<< HEAD","    "],"id":458}],[{"start":{"row":77,"column":62},"end":{"row":78,"column":0},"action":"insert","lines":["",""],"id":459},{"start":{"row":78,"column":0},"end":{"row":78,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":83,"column":38},"end":{"row":84,"column":0},"action":"insert","lines":["",""],"id":460},{"start":{"row":84,"column":0},"end":{"row":84,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":64,"column":67},"end":{"row":67,"column":48},"action":"remove","lines":["","=======","    return render_template('home.html', user=user)",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"],"id":461}],[{"start":{"row":61,"column":62},"end":{"row":62,"column":12},"action":"remove","lines":["","<<<<<<< HEAD"],"id":462}],[{"start":{"row":23,"column":56},"end":{"row":26,"column":48},"action":"remove","lines":["","=======","    return render_template(\"home.html\")",">>>>>>> d5637f85379ec2b6638fe28bbd260b614b1d80c1"],"id":463}],[{"start":{"row":20,"column":11},"end":{"row":21,"column":12},"action":"remove","lines":["","<<<<<<< HEAD"],"id":464}]]},"ace":{"folds":[],"scrolltop":1440,"scrollleft":0,"selection":{"start":{"row":159,"column":67},"end":{"row":159,"column":67},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1561556195994,"hash":"8e92f80da6db57e369d1ac4fab23afdcac620f18"}